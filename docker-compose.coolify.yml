version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://pepperbot:pepperbot_prod_password_2024@db:5432/pepperbot
      - SECRET_KEY=${SECRET_KEY}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - ENVIRONMENT=production
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - pepperbot_network
    depends_on:
      - db

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - pepperbot_network

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-pepperbot}
      POSTGRES_USER: ${POSTGRES_USER:-pepperbot}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-pepperbot}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - pepperbot_network

  # Scraper Service
  scraper:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://pepperbot:pepperbot_prod_password_2024@db:5432/pepperbot
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
    volumes:
      - postgres_data:/var/lib/postgresql/data
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - pepperbot_network
    command: ["python", "-c", "from src.scraper import start_scraper; import asyncio; asyncio.run(start_scraper())"]

  # Telegram Bot Service
  bot:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://pepperbot:pepperbot_prod_password_2024@db:5432/pepperbot
      - SECRET_KEY=${SECRET_KEY}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - ENVIRONMENT=production
    volumes:
      - postgres_data:/var/lib/postgresql/data
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - pepperbot_network
    command: ["python", "-c", "from src.bot import start_bot, start_notification_worker; import asyncio; asyncio.run(start_notification_worker()); asyncio.run(start_bot())"]

volumes:
  postgres_data:
    driver: local

networks:
  pepperbot_network:
    driver: bridge