version: '3.8'

services:
  # Backend API Service (Development)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=sqlite:////app/data/pepperbot.db
      - SECRET_KEY=dev-secret-key-change-in-production
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - ENVIRONMENT=development
    volumes:
      - ./backend:/app
      - sqlite_data:/app/data
    depends_on:
      - db
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - pepperbot_network
    command: ["python", "run.py"]

  # Frontend Service (Development with hot reload)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8000
    restart: unless-stopped
    networks:
      - pepperbot_network

  # PostgreSQL Database (Development)
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: pepperbot
      POSTGRES_USER: pepperbot
      POSTGRES_PASSWORD: pepperbot_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pepperbot"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - pepperbot_network

  # Scraper Service (Development)
  scraper:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/app
      - sqlite_data:/app/data
    environment:
      - DATABASE_URL=sqlite:////app/data/pepperbot.db
      - SECRET_KEY=dev-secret-key-change-in-production
      - ENVIRONMENT=development
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - pepperbot_network
    command: ["python", "-c", "from src.scraper import start_scraper; import asyncio; asyncio.run(start_scraper())"]

  # Bot Service (Development)
  bot:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/app
      - sqlite_data:/app/data
    environment:
      - DATABASE_URL=sqlite:////app/data/pepperbot.db
      - SECRET_KEY=dev-secret-key-change-in-production
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - ENVIRONMENT=development
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - pepperbot_network
    command: ["python", "-c", "from src.bot import start_bot, start_notification_worker; import asyncio; asyncio.run(start_notification_worker()); asyncio.run(start_bot())"]

volumes:
  sqlite_data:
    driver: local
  postgres_data:
    driver: local

networks:
  pepperbot_network:
    driver: bridge